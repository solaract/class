/**
 * Created by observer on 15/5/16.
 */
//一.事件
//想了很一阵子，还是打算细讲，参考事件.html

//二.正则表达式基础

//1.exec,match,test,replace
RegExp.test(String) ;      //匹配字符串是否为指定格式
RegExp.exec(String);      //返回查询的值
String.replace(RegExp, String); //  将字符串替换成另外一个字符窜，RegExp指定的格式，String要替换的字符串
String.match(RegExp);          //将指定格式的字符串以数组的方式返回
String.split(RegExp) ;              // 将字符串拆分成数组
String.search(RegExp) ; // 返回索引位置，类似indexOf()
//2.正则表达式基础 // new RegExp
var str = 'hi';
/hi/.test(str);

//2.1 常用元字符 . \b \d ^ $ \s \w

//\b 单词位置
var str = 'history,hehi,he';
/hi/.test(str);
/\bhi\b/.test(str);

//\w 单词字符，所有的数字以及下划线
var str = "h_1";
/\w\w\w/.test(str);

//.匹配初换行符以外任意字符
var str = 'hi,lucy';
/\bhi\b.\blucy\b/.test(str);

//\d匹配数字
var str = '028-88888888';
/0\d\d\d-\d\d\d\d\d\d\d\d/.test(str);

//^匹配字符串的开始 $匹配字符串的结束
var str = '123';
/^\d$/.test(str);
/^\d\d\d$/.test(str);

//\s匹配任意的空白符(空白，制表，换行等)
var str= ' ';
/\s/test(str);

//2.2 反义 \W \S \D \B [^x]
//\W \S \D \B与上面小写对应相反
var str = 'x';
/[^x]/.test(str);

var str = 'xaaa';
/[^x]/.test(str);

//2.3 字符的转义\
var str = 'www.baidu.com';
/www\.baidu\.com/.test(str);

var str = 'c:\\windows';

/c:\\windows/.test(str);


//2.4关于参数g i m
//g 作用于match时 进行全局查找 作用于replace时，进行全部的替换 作用于exec的时候 从最后开始查找
var str = '1a1b1c';

console.log(str.replace(/1/, '')); // a1b1c

console.log(str.replace(/1/g, '')); // abc
//i 忽略大小写

//m 影响^,$
var str = '123\r\n456';

var reg1 = new RegExp("^123$\r\n^456$", "m"); // true

var reg2 = new RegExp("^123$\r\n^456$", ""); // false

var reg3 = new RegExp("123\r\n456", "m"); // true

var reg4 = new RegExp("123\r\n456", ""); // false

//2.5贪婪与懒惰

//重复
//*重复0次或多次
var str = 'hi,,,,,';
/\bhi\b,*/.test(str);
var str = 'hi';
/\bhi\b,*/.test(str);
//+重复1次或更多次
var str = 'hi,,,,,';
/\bhi\b,+/.test(str);
str.match(/\bhi\b,+/);
var str = 'hi';
/\bhi\b,+/.test(str);

//?重复0次或一次
var str = 'hi,,,,,';
/\bhi\b,?/.test(str);
str.match(/\bhi\b,?/);
var str = 'hi';
/\bhi\b,?/.test(str);
str.match(/\bhi\b,?/);

//{n}重复n次 {n,m}重复n到m次 {n,}重复n次及以上
var str = '32640798';
/^\d{5,12}$/.test(str);
var str = '18888888888';
/^188\d{8}/.test(str);

//懒惰
//*?
var str = 'aabab';
console.log(str.match(/a.*b/));
console.log(str.match(/a.*?b/));

//匹配方式的区别
var str = "abbbaabbbaaabbb1234";
var re1 = /.*bbb/g;   //贪婪匹配
var re2 = /.*?bbb/g;  //惰性匹配
console.log(str.match(re1));
console.log(str.match(re2));

//2.6分组
var str = 'abcabcabc';
/(abc){3}/.test(str);
var str = 'abcabc';
/(abc){3}/.test(str);

var str = '104.236.129.162';
/(\d{1,3}\.){3}.{1,3}/.test(str);

//三.AJAX
//1.XMLHttpRequest
//通过使用XHR对象获取到服务器的数据，虽然名字中包含XML，但Ajax通讯与数据格式无关，所以我们的数据格式可以是XML或JSON等格式。

//2.content-type
//普通文本 : text/plain，HTML代码 : text/html，XML代码 : text/xml，JSON代码 : application/json，javascript代码 : test/javascript (application/javascript) 以及application/x-www-form-urlencoded

//3.ajax请求
function request(reqdata, url, callback) {
    //初始化ajax对象
    var xmlhttp;
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
    }
    //低版本ie
    else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    xmlhttp.onreadystatechange = function () {
        //4代表完成，收到全部响应数据，200表示请求成功
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            var data = JSON.parse(xmlhttp.responseText);
            callback(data);
        }
    };
    xmlhttp.open("POST", url);  //post get put(更新) delete(删除)方法
    xmlhttp.setRequestHeader("Content-Type", "application/json; charset=utf-8");
    xmlhttp.send(reqdata);
}